{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://pichardo-j-hw2/./src/enums/audio-defaults.enum.ts","webpack://pichardo-j-hw2/./src/audio.ts","webpack://pichardo-j-hw2/./src/visualizer.ts","webpack://pichardo-j-hw2/./src/utils.ts","webpack://pichardo-j-hw2/./src/classes/Sprite.ts","webpack://pichardo-j-hw2/./src/enums/main-defaults.enum.ts","webpack://pichardo-j-hw2/./src/main.ts","webpack://pichardo-j-hw2/./src/loader.ts"],"sourcesContent":["export enum DEFAULTS{\r\n    Gain = .5,\r\n    NumSamples = 256\r\n}","import { DEFAULTS } from \"./enums/audio-defaults.enum\"\r\n\r\nlet audioCtx : AudioContext,\r\nelement : HTMLAudioElement, \r\nsourceNode:MediaElementAudioSourceNode, \r\nanalyserNode : AnalyserNode, \r\ngainNode: GainNode, \r\nbiquadFilter:BiquadFilterNode,\r\nlowShelfBiquadFilter:BiquadFilterNode;\r\n\r\nconst setupWebaudio = (filePath: string) => {\r\n  const AudioContext = window.AudioContext;\r\n  audioCtx = new AudioContext();\r\n  element = new Audio();\r\n\r\n  // point at a sound file\r\n  loadSoundFile(filePath);\r\n\r\n  // create an a source node that points at the <audio> element\r\n  sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n  biquadFilter = audioCtx.createBiquadFilter();\r\n\tbiquadFilter.type = \"highshelf\";\r\n\r\n\tlowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n\tlowShelfBiquadFilter.type = \"lowshelf\";\r\n\r\n  // create an analyser node\r\n  analyserNode = audioCtx.createAnalyser();\r\n  analyserNode.fftSize = DEFAULTS.NumSamples;\r\n\r\n  // create a gain (volume) node\r\n  gainNode = audioCtx.createGain();\r\n  gainNode.gain.value = DEFAULTS.Gain;\r\n\r\n  // connect the nodes \r\n  sourceNode.connect(biquadFilter);\r\n  biquadFilter.connect(lowShelfBiquadFilter);\r\n  lowShelfBiquadFilter.connect(analyserNode);\r\n  analyserNode.connect(gainNode);\r\n  gainNode.connect(audioCtx.destination);\r\n};\r\n\r\nconst loadSoundFile = (filePath:string) => {\r\n  element.src = filePath;\r\n};\r\nconst playCurrentSound = () => {\r\n  element.play();\r\n};\r\n\r\nconst pauseCurrentSound = () => {\r\n  element.pause();\r\n};\r\n\r\nconst setVolume = (value:number) => {\r\n  gainNode.gain.value = value;\r\n};\r\n// treble and bass toggle filters\r\nconst toggleHighshelf = (highshelf:boolean) => {\r\n  if(highshelf){\r\n    biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    biquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n  }else{\r\n    biquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n  }\r\n};\r\nconst toggleLowshelf = (lowshelf:boolean) => {\r\n  if(lowshelf){\r\n    lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    lowShelfBiquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\r\n  }else{\r\n    lowShelfBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n  }\r\n};\r\n\r\nexport{audioCtx, toggleHighshelf, toggleLowshelf,setupWebaudio,playCurrentSound,pauseCurrentSound,loadSoundFile,setVolume,analyserNode};","import * as utils from './utils';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nlet ctx : CanvasRenderingContext2D,\r\ncanvasWidth:number,canvasHeight:number,\r\ngradient:CanvasGradient,\r\nanalyserNode:AnalyserNode,\r\naudioData: Uint8Array;\r\n\r\nlet barWidth:number,barHeight:number;\r\n\r\nconst setupCanvas = (canvasElement:HTMLCanvasElement,analyserNodeRef:AnalyserNode) => {\r\n\t// create drawing context\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\r\n\tgradient = utils.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"rgba(14,14,14,1) \"},{percent:1,color:\"rgba(125,126,125,1)\"}]);\r\n\r\n\t// keep a reference to the analyser node\r\n\tanalyserNode = analyserNodeRef;\r\n\t// this is the array where the analyser data will be stored\r\n\taudioData = new Uint8Array(analyserNode.fftSize/2);\r\n\r\n\tbarWidth = (canvasWidth/2)/audioData.length;\r\n};\r\n\r\nconst draw = (params:DrawParams, dataType:string) => {\r\n\t// get currently selected data type of audio (frequency or waveform data)\r\n\tif(dataType == \"frequency\") analyserNode.getByteFrequencyData(audioData);\r\n\tif(dataType == \"wave\") analyserNode.getByteTimeDomainData(audioData);\r\n\r\n\t// draw background\r\n\tctx.save();\r\n\tctx.fillStyle = gradient;\r\n\tctx.globalAlpha = .1;\r\n\tctx.fillRect(0,0,canvasWidth,canvasHeight);\r\n\tctx.restore();\r\n\r\n\t// draw circles if checked by user\r\n\tif(params.showCircles){\r\n\t\tlet maxRadius = canvasHeight/2 * 1.5;\r\n\t\tctx.save();\r\n\t\tctx.globalAlpha = 0.5;\r\n\t\tfor(let i=0; i<audioData.length; i++){\r\n\t\t\tlet percent = audioData[i] / 255;\r\n\t\t\tlet circleRadius = percent * maxRadius;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle=utils.makeColor(136,92,164,.34-percent/3.0);\r\n\t\t\tctx.arc(canvasWidth/2,canvasHeight,circleRadius, 0, 2*Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle=utils.makeColor(96,52,80,.10-percent/10.0);\r\n\t\t\tctx.arc(canvasWidth/2,canvasHeight,circleRadius * 1.5, 0, 2*Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle=utils.makeColor(60,64,140,.5-percent/5.0);\r\n\t\t\tctx.arc(canvasWidth/2,canvasHeight,circleRadius * .50, 0, 2*Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\t\r\n\t// draw bars\r\n\tctx.save();\r\n\tlet x = 0;\r\n\tlet padding = 4;\r\n\t//draw bars from center to left side of canvas\r\n\tfor(let i=0; i<audioData.length;i++){\r\n\t\tbarHeight = audioData[i];\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = \"white\";\r\n\t\tctx.fillRect(canvasWidth/2-x, canvasHeight - barHeight -15, barWidth, 10);\r\n\t\tctx.restore();\r\n\t\t\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = `rgb(${audioData[i]},${audioData[i]-128},${255-audioData[i]})`;\r\n\t\tctx.fillRect(canvasWidth/2-x, canvasHeight - barHeight, barWidth, barHeight);\r\n\t\tctx.restore();\r\n\r\n\t\tx += barWidth;\r\n\t\tctx.translate(-padding,0);\r\n\t}\r\n\tctx.restore();\r\n\t//draw bars from center to right side of canvas\r\n\tctx.save();\r\n\tfor(let i=0; i<audioData.length;i++){\r\n\t\tbarHeight = audioData[i];\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = \"white\";\r\n\t\tctx.fillRect(x, canvasHeight - barHeight -15, barWidth, 10);\r\n\t\tctx.restore();\r\n\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = `rgb(${audioData[i]},${audioData[i]-128},${255-audioData[i]})`;\r\n\t\tctx.fillRect(x, canvasHeight - barHeight, barWidth, barHeight);\r\n\t\tctx.restore();\r\n\r\n\t\tx += barWidth;\r\n\t\tctx.translate(padding,0);\r\n\t}\t\r\n\tctx.restore();\r\n\r\n\t// bitmap manipulation\r\n\t// TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n\t// regardless of whether or not we are applying a pixel effect\r\n\t// At some point, refactor this code so that we are looping though the image data only if\r\n\t// it is necessary\r\n\r\n\t// A) grab all of the pixels on the canvas and put them in the `data` array\r\n\t// `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n\t// the variable `data` below is a reference to that array \r\n\tlet imageData = ctx.getImageData(0,0,canvasWidth,canvasHeight);\r\n\tlet data = imageData.data;\r\n\tlet length = data.length;\r\n\tlet width = imageData.width;\r\n\t// B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n\tfor(let i=0; i < length; i+=4){\r\n\t\tif(params.showNoise && Math.random() < .05){\r\n\t\t\t// data[i] is the red channel\r\n\t\t\t// data[i+1] is the green channel\r\n\t\t\t// data[i+2] is the blue channel\r\n\t\t\t// data[i+3] is the alpha channel\r\n\t\t\tdata[i] = data[i+1] = data[i+2] = 0;// zero out the red and green and blue channels\r\n\t\t\tdata[i+3] = 200;\r\n\t\t} // end if\r\n\r\n\t\t//invert\r\n\t\tif(params.showInvert){\r\n\t\t\tlet red = data[i], green = data[i+1], blue = data[i+2];\r\n\t\t\tdata[i] = 255 - red;\r\n\t\t\tdata[i+1] = 255 - green;\r\n\t\t\tdata[i+2] = 255 - blue;\r\n\t\t}\r\n\t}   // end for\r\n\tif(params.showEmboss){\r\n\t\tfor(let i = 0; i < length; i++){\r\n\t\t\tif(i%4 == 3) continue;\r\n\t\t\tdata[i] = 127 + 2*data[i] - data[i+4] - data[i + width *4];\r\n\t\t}\r\n\t}\r\n\t// D) copy image data back to canvas\r\n\tctx.putImageData(imageData,0,0);\r\n}\r\n\r\nexport {setupCanvas,draw,ctx,audioData,canvasWidth};","import { ColorStop } from \"./interfaces/colorStop.interface\";\r\n\r\nconst makeColor = (red:number, green:number, blue:number, alpha = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n  \r\nconst getRandom = (min:number, max:number) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n  \r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor,255-floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n  \r\nconst getLinearGradient = (ctx:CanvasRenderingContext2D,startX:number,startY:number,endX:number,endY:number,colorStops:ColorStop[]) => {\r\n  let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n  for(let stop of colorStops){\r\n    lg.addColorStop(stop.percent,stop.color);\r\n  }\r\n  return lg;\r\n};\r\n  \r\nconst goFullscreen = (element:HTMLCanvasElement) => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  }\r\n};\r\n  \r\nexport {makeColor, getRandomColor, getLinearGradient, goFullscreen};","export default class Sprite{\r\n    x : number;\r\n    y : number;\r\n    fillStyle : CanvasRenderingContext2D;\r\n    audioData : Uint8Array;\r\n    canvasWidth : number;\r\n    rotation : number;\r\n  \r\n    constructor({x, y, fillStyle, audioData, canvasWidth, rotation}){\r\n        Object.assign(this,{x, y, fillStyle, audioData, canvasWidth, rotation});\r\n    }\r\n    \r\n    update(){\r\n        //update rotation for some movement\r\n        this.rotation += 0.01;\r\n    }\r\n    \r\n    draw(ctx:CanvasRenderingContext2D){\r\n        let barHeight : number;\r\n        let barWidth = (this.canvasWidth/2)/this.audioData.length;\r\n        let increment = 0;\r\n        for(let i = 0; i < this.audioData.length;i++){\r\n          barHeight = this.audioData[i] * 0.5;\r\n          //draw center\r\n          ctx.save();\r\n          ctx.translate(this.x,this.y);\r\n          ctx.rotate(i + Math.PI * 2/this.audioData.length);\r\n          ctx.fillStyle = \"yellow\";\r\n          ctx.fillRect(0,0,barWidth,15);\r\n    \r\n          //draw bars that will be rotated with update\r\n          ctx.save();\r\n          ctx.rotate(this.rotation);\r\n          ctx.fillStyle = this.fillStyle;\r\n          ctx.fillRect(0,0,barWidth,barHeight);\r\n          ctx.restore();\r\n    \r\n          increment+= barWidth;\r\n          ctx.restore();\r\n        }\r\n    }\r\n};","export enum DEFAULTS{\r\n    sound1 = \"./media/New Adventure Theme.mp3\"\r\n}","import * as audio from './audio';\r\nimport * as utils from './utils';\r\nimport * as canvas from './visualizer';\r\nimport Sprite from './classes/Sprite';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\nimport { JSONObject } from './interfaces/jsonObject.interface';\r\nimport { DEFAULTS } from './enums/main-defaults.enum';\r\n\r\nlet highshelf = false;\r\nlet lowshelf = false;\r\nlet dataType = \"frequency\";\r\n\r\nlet json:JSONObject;\r\n\r\nlet sprites: Sprite[];\r\n\r\nconst drawParams:DrawParams = {\r\n  showCircles  : true,\r\n  showNoise    : false,\r\n  showInvert   : false,\r\n  showEmboss   : false\r\n};\r\n\r\nconst init = () => {\r\n  sprites = [];\r\n  loadJSON();\r\n  audio.setupWebaudio(DEFAULTS.sound1);\r\n\tlet canvasElement = document.querySelector(\"canvas\");\r\n\tsetupUI(canvasElement);\r\n  canvas.setupCanvas(canvasElement,audio.analyserNode);\r\n  loop();\r\n};\r\n\r\nconst loop = () => {\r\n  // change runtime to 60 fps\r\n  setTimeout(loop,1000/60);\r\n\r\n  canvas.draw(drawParams, dataType);\r\n  sprites.forEach(s => {\r\n    s.update();\r\n    s.draw(canvas.ctx);\r\n  })\r\n};\r\n\r\nconst setupUI = (canvasElement:HTMLCanvasElement) => {\r\n  // fullscreen button\r\n  const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n  fsButton.onclick = () => {\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n  // play button\r\n  const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n  playButton.onclick = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    if(audio.audioCtx.state == \"suspended\"){\r\n        audio.audioCtx.resume();\r\n    }\r\n    if(target.dataset.playing == \"no\"){\r\n        audio.playCurrentSound();\r\n        target.dataset.playing = \"yes\";\r\n    }else{\r\n        audio.pauseCurrentSound();\r\n        target.dataset.playing = \"no\";\r\n    }\r\n  };\r\n\r\n  // volume slider\r\n  let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  let volumeLabel = document.querySelector(\"#label-volume\") as HTMLBodyElement;\r\n  volumeSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.setVolume(Number(target.value));\r\n    volumeLabel.innerHTML = String(Math.round((Number(target.value)/2 * 100)));\r\n  };\r\n\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\t\r\n  // track select\r\n  let trackSelect = document.querySelector('#select-track') as HTMLInputElement;\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.loadSoundFile(target.value);\r\n    if(playButton.dataset.playing == \"yes\"){\r\n        playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n  // treble and bass toggle checkboxes\r\n  let highshelfCB = document.querySelector('#cb-highshelf') as HTMLInputElement;\r\n  highshelfCB.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    highshelf = target.checked;\r\n    audio.toggleHighshelf(highshelf);\r\n  };\r\n  let lowshelfCB = document.querySelector('#cb-lowshelf') as HTMLInputElement;\r\n  lowshelfCB.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    lowshelf = target.checked;\r\n    audio.toggleLowshelf(lowshelf);\r\n  };\r\n  audio.toggleHighshelf(highshelf);\r\n  audio.toggleLowshelf(lowshelf);\r\n\r\n  // visualization toggle\r\n  let dataToggle = document.querySelector(\"#data-toggle\") as HTMLInputElement;\r\n  dataToggle.onchange = () =>{\r\n    let radioBtns = document.querySelectorAll(\".audio-data\");\r\n    for(let i = 0; i < radioBtns.length; i++){\r\n      let btn = radioBtns[i] as HTMLInputElement;\r\n      if(btn.checked) dataType = btn.value;\r\n    }\r\n  };\r\n\r\n  let circlesCB = document.querySelector(\"#cb-circles\") as HTMLInputElement;\r\n  circlesCB.onclick = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    drawParams.showCircles = target.checked;\r\n  };\r\n  let noiseCB = document.querySelector(\"#cb-noise\") as HTMLInputElement;\r\n  noiseCB.onclick = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    drawParams.showNoise = target.checked;\r\n  };\r\n  let invertCB = document.querySelector(\"#cb-invert\") as HTMLInputElement;\r\n  invertCB.onclick = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    drawParams.showInvert = target.checked;\r\n  };\r\n  let embossCB = document.querySelector(\"#cb-emboss\") as HTMLInputElement;\r\n  embossCB.onclick = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    drawParams.showEmboss = target.checked;\r\n  };\r\n\r\n}; // end setupUI\r\n\r\nconst loadJSON = () => {\r\n  const url = \"./data/av-data.json\";\r\n  const xhr = new XMLHttpRequest();\r\n\r\n  xhr.onload = () => parseJSON(xhr);\r\n  xhr.open(\"GET\", url);\r\n  xhr.send();\r\n};\r\n\r\nconst parseJSON = (xhr: XMLHttpRequest) => {\r\n  const string = xhr.responseText;\r\n\r\n  try{\r\n    json = JSON.parse(string);\r\n  }\r\n  catch{\r\n    console.log(\"Bad JSON\");\r\n  }\r\n  //set title of html page from json file\r\n  let title = document.querySelector(\"title\") as HTMLElement; \r\n  title.innerHTML = json.title;\r\n\r\n  //set each track to track selector\r\n  let html = \"\";\r\n  for(let i = 0; i < json.tracks.length;i++){\r\n    html += `<option value=\"${json.tracks[i].url}\">${json.tracks[i].name}</option>`;\r\n  }\r\n  let trackSelect = document.querySelector('#select-track') as HTMLInputElement;\r\n  trackSelect.innerHTML = html;\r\n    \r\n  // set up sprites on canvas\r\n  for(let i = 0; i < json.data.length;i++){\r\n    sprites.push(new Sprite({x: json.data[i].x, \r\n                             y: json.data[i].y, \r\n                             fillStyle: json.data[i].color, \r\n                             audioData: canvas.audioData, \r\n                             canvasWidth: canvas.canvasWidth, \r\n                             rotation: 0.05}));\r\n  }\r\n};\r\n\r\nexport {init};","import * as main from \"./main\";\r\nwindow.onload = () =>{\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\t\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}"],"names":["DEFAULTS","audioCtx","sourceNode","analyserNode","gainNode","biquadFilter","lowShelfBiquadFilter","ctx","canvasWidth","canvasHeight","gradient","audioData","barWidth","barHeight","loadSoundFile","filePath","src","toggleHighshelf","highshelf","frequency","setValueAtTime","currentTime","gain","toggleLowshelf","lowshelf","makeColor","red","green","blue","alpha","x","y","fillStyle","rotation","Object","assign","this","update","draw","length","i","save","translate","rotate","Math","PI","fillRect","restore","json","sprites","dataType","drawParams","showCircles","showNoise","showInvert","showEmboss","loop","setTimeout","params","getByteFrequencyData","getByteTimeDomainData","globalAlpha","maxRadius","percent","circleRadius","beginPath","arc","fill","closePath","imageData","getImageData","data","width","random","putImageData","forEach","s","setupUI","canvasElement","document","querySelector","onclick","element","requestFullscreen","playButton","e","target","state","resume","dataset","playing","play","pause","volumeSlider","volumeLabel","oninput","value","Number","innerHTML","String","round","dispatchEvent","Event","onchange","MouseEvent","checked","radioBtns","querySelectorAll","btn","loadJSON","xhr","XMLHttpRequest","onload","parseJSON","open","send","string","responseText","JSON","parse","console","log","title","html","tracks","url","name","push","color","window","AudioContext","sound1","Audio","createMediaElementSource","createBiquadFilter","type","createAnalyser","fftSize","NumSamples","createGain","Gain","connect","destination","analyserNodeRef","getContext","height","startX","startY","endX","endY","colorStops","lg","createLinearGradient","addColorStop","Uint8Array"],"sourceRoot":""}